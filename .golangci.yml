# tested with golangci/golangci-lint:v1.35

linters:
  enable-all: true
  disable:
    # check that no global variables exist
    # disabled because there are some cases where its nice to have globals like `var MyCmd = &cli.Command{[...]`
    - gochecknoglobals
    # Reports unused function parameters
    # disabled because to many false positives
    - unparam
    # Goimports does everything that gofmt does. Additionally it checks unused imports
    # disabled because it is annoying that the imports have to be in a specific order / grouped with newlines
    - goimports
    # Checks that no init functions are present in Go code
    # disabled because init functions are ok, not nice, just ok
    - gochecknoinits
    # Whitespace Linter - Forces you to use empty lines!
    # disabled because go fmt is enough
    - wsl
    # An analyzer to detect magic numbers.
    # disabled because it is very annoying and brings little improvement
    - gomnd
    # Golang linter to check the errors handling expressions
    # disabled because it forces a lot that does not work with golang github pkg errors
    - goerr113
    # Tool for detection of FIXME, TODO and other comment keywords
    # disabled because it is ok
    - godox
    # Check if comments end in a period
    # disabled because it is very annoying and brings little improvement
    - godot
    # Go linter that checks if package imports are in a list of acceptable packages
    # disabled because we allow everything!
    - depguard
    # nlreturn checks for a new line before return and branch statements to increase code clarity
    # disabled because it is very annoying and brings little improvement
    - nlreturn
    # Checks if all struct's fields are initialized
    # disabled because: 'This linter is meant to be used only for special cases.
    # It is not recommended to use it for all files in a project.'
    - exhaustivestruct
    # forbidigo is a Go static analysis tool to forbidigo use of particular identifiers
    # disabled because the linter forbids fmt.Printf/Errorf
    - forbidigo
    # check exhaustiveness of enum switch statements
    # disabled because it does not work correctly on switch cases with default block
    - exhaustive
    # Gofumpt checks whether code was gofumpt-ed.
    # disabled because we dont need another format / way too restrictive to new lines
    - gofumpt
    # Gci control golang package import order and make it always deterministic.
    # disabled because it is not needed
    - gci
    # Checks that errors returned from external packages are wrapped
    # disabled because even errors returned from internal interfaces must me wrapped, which is overkill
    - wrapcheck

linters-settings:
  # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose
  govet:
    # report about shadowed variables
    check-shadowing: true
  # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
  golint:
    # minimal confidence for issues
    min-confidence: 0
  # Computes and checks the cyclomatic complexity of functions
  gocyclo:
    # minimal code complexity to report
    min-complexity: 20
  # Tool to detect Go structs that would take less memory if their fields were sorted
  maligned:
    # print struct with more effective memory layout or not
    suggest-new: true
  # Tool for code clone detection
  dupl:
    # tokens count to trigger issue
    threshold: 100
  # Finds repeated strings that could be replaced by a constant
  goconst:
    # minimal length of string constant
    min-len: 3
    # minimal occurrences count to trigger
    min-occurrences: 3
  # Finds commonly misspelled English words in comments
  misspell:
    locale: US
  # Reports long lines
  lll:
    line-length: 180
  # Tool for detection of long functions
  funlen:
    lines: 100
    statements: 60
  # The most opinionated Go source code linter
  gocritic:
    disabled-checks:
      # Detects repeated if-else statements and suggests to replace them with switch statement.
      - ifElseChain
      # Detects comments with non-idiomatic formatting (space between // and the text).
      - commentFormatting
  # go-errorlint is a source code linter for Go software that can be used to find code that will cause
  errorlint:
    # Report non-wrapping error creation using fmt.Errorf
    # disabled because sometimes formatting an error with '%+v' instead of '%w' is required to print the stacktrace
    errorf: false

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

    - linters:
        - staticcheck
      # activate it when github.com/golang/protobuf/proto is migrated to google.golang.org/protobuf/proto
      text: "SA1019: package github.com/golang/protobuf/proto is deprecated:"

run:
  skip-dirs:
    - tests/
    - cmd/test-*
    - pkg/pb/
  skip-files:
    - .*/generated\.go
    - .*_test\.go
    - test\.go
  timeout: 10m

